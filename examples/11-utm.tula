trace (UTM Inc) {
    %
        (Inc 0 1 -> Halt) (Inc 1 0 -> Inc)
        (Dec 1 0 -> Halt) (Dec 0 1 -> Dec)
    &
    (head 1) 1 0 1 0
}

let State  { Inc Dec Halt }
let Alpha  { 0 1 }
let Action { -> <- . }
let Rule   ( State * Alpha * Alpha * Action * State )
let Any    ( Rule + { & } + Alpha )

for s in State
for r in Alpha
case (UTM s) (head r) (head r) <- (Match s r)
 
for _ in Any + { % }
for s in State
case (UTM s) _ _ -> (UTM s)

for s n in State
for r w in Alpha
for a in Action
case (Match s r) (s r w a n) (s r w a n) -> (Write w a n)

for _ in Any
for s in State
for r in Alpha
case (Match s r) _ _ <- (Match s r)

for _ in Alpha
for w in Alpha
for a in Action
for n in State
case (Write w a n) (head _) w a (Next n)

for _ in Any
for w in Alpha
for a in Action
for n in State
case (Write w a n) _ _ -> (Write w a n)

for s in State
case (Next s) & & . Tape_Underflow

for s in State
for r in Alpha
case (Next s) r (head r) <- (Match s r)
